# Local anchors for this file only
x-logging: &default-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"

x-healthcheck: &health_http
  test:
    ["CMD", "wget", "--spider", "${HEALTH_URL:-http://localhost:3000/health}"]
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 20s

services:
  postgres:
    image: postgres:15
    restart: always
    container_name: postgres
    hostname: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-myuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mypass}
      - POSTGRES_DB=${POSTGRES_DB:-mydb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    expose:
      - "5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-myuser} -d ${POSTGRES_DB:-mydb}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  backenddev:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backenddev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER:-myuser}:${POSTGRES_PASSWORD:-mypass}@postgres:5432/${POSTGRES_DB:-mydb}?schema=public
      - PORT=3000
      - CORS_ORIGIN=*
      - SESSION_SECRET=${SESSION_SECRET}
      - HEALTH_URL=http://localhost:3000/health
    volumes:
      - ./backend:/app
      - /app/node_modules
    expose:
      - "3000"
    ports:
      - "3000:3000"
      - "5555:5555"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging: *default-logging
    command: sh -c "npm install && npx prisma generate && npx prisma migrate deploy && (test -f prisma/seed.js && npx prisma db seed || npm run prisma:seed) && npm run dev"

  discord-botdev:
    build:
      context: ./bot
      dockerfile: Dockerfile
      args:
        - NODE_ENV=development
    container_name: discord-botdev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_GUILD_ID=${DISCORD_GUILD_ID}
      - API_URL=http://backenddev:3000
      - ADMIN_ROLE=${ADMIN_ROLE}
      - HEALTH_URL=http://localhost:3001/health
      - DEPLOY_TIMEOUT_MS=20000
      - DEPLOY_CONCURRENCY=3
    depends_on:
      discord-bot-deploy:
        condition: service_completed_successfully
      backenddev:
        condition: service_healthy
    volumes:
      - ./bot:/app
      - /app/node_modules
      - bot-logs:/app/logs
    ports:
      - "3001:3001"
    networks:
      - internal
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3001/health"]
      timeout: 10s
      retries: 3
      start_period: 20s
    logging: *default-logging

  discord-bot-deploy:
    build:
      context: ./bot
      dockerfile: Dockerfile
      args:
        - NODE_ENV=development
    container_name: discord-bot-deploy
    restart: "no"
    environment:
      - NODE_ENV=development
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_GUILD_ID=${DISCORD_GUILD_ID}
      - API_URL=http://backenddev:3000
      - ADMIN_ROLE=${ADMIN_ROLE}
    depends_on:
      backenddev:
        condition: service_healthy
    volumes:
      - ./bot:/app
      - /app/node_modules
      - bot-logs:/app/logs
    networks:
      - internal
    logging: *default-logging
    command: npx tsx src/deploy-commands.ts

networks:
  internal:
    driver: bridge
    name: ${COMPOSE_PROJECT_NAME:-fateweaver}_internal

volumes:
  postgres_data:
    name: ${COMPOSE_PROJECT_NAME:-fateweaver}_postgres_data
  bot-logs:
    name: ${COMPOSE_PROJECT_NAME:-fateweaver}_bot_logs
