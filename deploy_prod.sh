#!/bin/bash
set -e

echo "üîç V√©rification des variables critiques..."
# Forcer l'URL √† utiliser HTTPS si ce n'est pas d√©j√† le cas
if [[ ! "$PORTAINER_URL" =~ ^https:// ]]; then
  if [[ "$PORTAINER_URL" =~ ^http:// ]]; then
    PORTAINER_URL="https://${PORTAINER_URL#http://}"
  else
    PORTAINER_URL="https://$PORTAINER_URL"
  fi
  echo "‚ö†Ô∏è  L'URL a √©t√© mise √† jour pour utiliser HTTPS: $PORTAINER_URL"
fi

echo "PORTAINER_URL: $PORTAINER_URL"
echo "PORTAINER_USERNAME: [REDACTED]"
echo "PORTAINER_PASSWORD: [REDACTED]"
echo "STACK_ID: ${STACK_ID:?Missing STACK_ID}"
echo "ENDPOINT_ID: ${ENDPOINT_ID:?Missing ENDPOINT_ID}"

# V√©rification des variables sensibles (sans les afficher)
: "${PORTAINER_USERNAME:?Missing PORTAINER_USERNAME}"
: "${PORTAINER_PASSWORD:?Missing PORTAINER_PASSWORD}"

# R√©cup√©ration du token d'authentification
echo "üîë Authentification aupr√®s de Portainer..."
API_URL="$PORTAINER_URL/api/auth"
echo "URL d'API: $API_URL"

echo "Envoi de la requ√™te d'authentification..."
# Utilisation de -L pour suivre les redirections et -k pour ignorer les erreurs SSL si n√©cessaire
HTTP_RESPONSE=$(curl -L -k -v -s -w "\n%{http_code}\n" -X POST \
  "$API_URL" \
  -H "Content-Type: application/json" \
  -d "{\"username\":\"$PORTAINER_USERNAME\",\"password\":\"$PORTAINER_PASSWORD\"}" 2>&1)

# Extraction du code HTTP et du corps de la r√©ponse
HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1)
AUTH_RESPONSE=$(echo "$HTTP_RESPONSE" | sed -n '/^[{[]/p' | tail -1)

echo "Code HTTP final: $HTTP_STATUS"
echo "En-t√™tes de la r√©ponse:"
echo "$HTTP_RESPONSE" | grep -v '^[{}]' | grep -v '^$' | head -n -2
echo "Corps de la r√©ponse: $AUTH_RESPONSE"

# V√©rification du code de statut HTTP
if [ "$HTTP_STATUS" -ne 200 ]; then
  echo "‚ùå Erreur lors de l'authentification (HTTP $HTTP_STATUS)"
  echo "R√©ponse du serveur: $AUTH_RESPONSE"
  exit 1
fi

# V√©rification que la r√©ponse est un JSON valide
if ! echo "$AUTH_RESPONSE" | jq -e . >/dev/null 2>&1; then
  echo "‚ùå La r√©ponse de l'API n'est pas un JSON valide"
  echo "Premiers caract√®res de la r√©ponse: ${AUTH_RESPONSE:0:100}..."
  echo "Tentative d'extraction du token JWT directement..."
  
  # Essayer d'extraire le token JWT m√™me si ce n'est pas du JSON valide
  TOKEN=$(echo "$AUTH_RESPONSE" | grep -oP '(?<="jwt":")[^"]*' || true)
  
  if [ -z "$TOKEN" ]; then
    echo "‚ùå Impossible d'extraire le token JWT de la r√©ponse"
    exit 1
  else
    echo "‚úÖ Token JWT extrait avec succ√®s (format non standard)"
  fi
else
  # Extraction normale du token JWT depuis le JSON
  TOKEN=$(echo "$AUTH_RESPONSE" | jq -r '.jwt')
  if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
    echo "‚ùå √âchec de l'authentification: JWT non trouv√© dans la r√©ponse"
    echo "R√©ponse compl√®te: $AUTH_RESPONSE"
    exit 1
  fi
  echo "‚úÖ Token JWT extrait avec succ√®s"
fi

# V√©rification du fichier docker-compose
if [ ! -f "docker-compose.prod.yml" ]; then
  echo "‚ùå Fichier docker-compose.prod.yml introuvable"
  exit 1
fi

# Pr√©paration du contenu en utilisant envsubst si n√©cessaire
echo "üìÑ Pr√©paration du contenu du docker-compose..."
if command -v envsubst >/dev/null 2>&1; then
  COMPOSE_CONTENT=$(envsubst < docker-compose.prod.yml)
  echo "$COMPOSE_CONTENT" > /tmp/docker-compose-substituted.yml
  COMPOSE_CONTENT=$(cat /tmp/docker-compose-substituted.yml | jq -Rs .)
else
  echo "‚ö†Ô∏è envsubst non trouv√©, utilisation du fichier brut"
  COMPOSE_CONTENT=$(cat docker-compose.prod.yml | jq -Rs .)
fi

# Cr√©ation du payload dans un fichier temporaire
echo "üì¶ Pr√©paration du payload..."
TMP_PAYLOAD=$(mktemp)
jq -n \
  --arg content "$COMPOSE_CONTENT" \
  --arg registry_url "${REGISTRY_URL:-registry.matthias-bouloc.fr}" \
  --arg image_name "${IMAGE_NAME:-fateweaver}" \
  --arg tag "${GITHUB_SHA:-latest}" \
  '{
    "stackFileContent": $content,
    "prune": true,
    "pullImage": true,
    "env": [
      {"name": "REGISTRY_URL", "value": $registry_url},
      {"name": "IMAGE_NAME", "value": $image_name},
      {"name": "TAG", "value": $tag}
    ]
  }' > "$TMP_PAYLOAD"

# Debug: Afficher le payload
echo "üìÑ Payload g√©n√©r√© :"
cat "$TMP_PAYLOAD" | jq .

# Mise √† jour de la stack
echo "üîÑ Mise √† jour de la stack Portainer (ID: $STACK_ID)..."
RESPONSE_CODE=$(curl -L -k -s -o /tmp/response.json -w "%{http_code}" -X PUT \
  "$PORTAINER_URL/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  --data-binary @"$TMP_PAYLOAD")

# Affichage de la r√©ponse
echo "üì• R√©ponse de l'API (HTTP $RESPONSE_CODE):"
cat /tmp/response.json | jq .

# Nettoyage
rm -f "$TMP_PAYLOAD" /tmp/response.json /tmp/docker-compose-substituted.yml 2>/dev/null || true

# V√©rification du code de statut
if [ "$RESPONSE_CODE" -eq 200 ]; then
  echo "‚úÖ Stack mise √† jour avec succ√®s !"
  exit 0
else
  echo "‚ùå Erreur lors de la mise √† jour de la stack"
  exit 1
fi