/**
 * Script de test end-to-end du cycle de vie complet d'une exp√©dition
 * Teste : PLANNING ‚Üí LOCKED ‚Üí DEPARTED ‚Üí RETURNED
 */

// Register tsconfig paths for module resolution
import "tsconfig-paths/register";

import { PrismaClient } from "@prisma/client";
import { container } from "../infrastructure/container";

const prisma = new PrismaClient();

function printSeparator() {
  console.log("\n" + "=".repeat(70));
}

function printStep(step: string) {
  printSeparator();
  console.log(`üéØ ${step}`);
  printSeparator();
}

async function main() {
  try {
    console.log("\n");
    console.log("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
    console.log("‚ïë      TEST CYCLE DE VIE COMPLET D'UNE EXP√âDITION                  ‚ïë");
    console.log("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");

    // ====================================================================
    // PR√âPARATION : R√©cup√©rer une ville et des personnages
    // ====================================================================
    printStep("PR√âPARATION : R√©cup√©ration d'une ville de test");

    const town = await prisma.town.findFirst({
      select: { id: true, name: true }
    });

    if (!town) {
      console.error("‚ùå Aucune ville trouv√©e dans la base de donn√©es");
      process.exit(1);
    }

    console.log(`‚úÖ Ville trouv√©e: ${town.name} (${town.id})`);

    const characters = await prisma.character.findMany({
      where: {
        townId: town.id,
        isDead: false,
        isActive: true
      },
      select: { id: true, name: true, paTotal: true },
      take: 2
    });

    if (characters.length === 0) {
      console.error("‚ùå Aucun personnage actif trouv√© dans cette ville");
      process.exit(1);
    }

    console.log(`‚úÖ ${characters.length} personnages trouv√©s:`);
    characters.forEach(c => console.log(`   - ${c.name} (${c.paTotal} PA)`));

    // ====================================================================
    // √âTAPE 1 : Cr√©er une exp√©dition en PLANNING
    // ====================================================================
    printStep("√âTAPE 1 : Cr√©ation d'une exp√©dition en PLANNING");

    const expedition = await prisma.expedition.create({
      data: {
        name: `Test Expedition ${Date.now()}`,
        townId: town.id,
        status: "PLANNING",
        duration: 2,
        initialDirection: "NORD",
        path: [],
        createdAt: new Date(Date.now() - 25 * 60 * 60 * 1000), // Cr√©√©e il y a 25h (hier)
        createdBy: characters[0].id // Use first character as creator
      }
    });

    console.log(`‚úÖ Exp√©dition cr√©√©e: ${expedition.name}`);
    console.log(`   ID: ${expedition.id}`);
    console.log(`   Status: ${expedition.status}`);
    console.log(`   CreatedAt: ${expedition.createdAt.toISOString()} (il y a 25h)`);

    // Ajouter les membres
    for (const character of characters) {
      await prisma.expeditionMember.create({
        data: {
          expeditionId: expedition.id,
          characterId: character.id
        }
      });
      console.log(`   ‚úÖ Membre ajout√©: ${character.name}`);
    }

    // ====================================================================
    // √âTAPE 2 : LOCK (minuit)
    // ====================================================================
    printStep("√âTAPE 2 : LOCK de l'exp√©dition (simule minuit)");

    await container.expeditionService.lockExpedition(expedition.id);

    const lockedExpedition = await prisma.expedition.findUnique({
      where: { id: expedition.id },
      select: { status: true, updatedAt: true }
    });

    console.log(`‚úÖ Exp√©dition verrouill√©e`);
    console.log(`   Status: ${lockedExpedition?.status}`);
    console.log(`   UpdatedAt: ${lockedExpedition?.updatedAt?.toISOString()}`);

    if (lockedExpedition?.status !== "LOCKED") {
      throw new Error(`‚ùå ERREUR: Status attendu LOCKED, re√ßu ${lockedExpedition?.status}`);
    }

    // ====================================================================
    // √âTAPE 3 : DEPART (matin 08h)
    // ====================================================================
    printStep("√âTAPE 3 : DEPART de l'exp√©dition (simule 08h)");

    await container.expeditionService.departExpedition(expedition.id);

    // Initialize path with initial direction
    await prisma.expedition.update({
      where: { id: expedition.id },
      data: { path: [expedition.initialDirection || "UNKNOWN"] }
    });

    const departedExpedition = await prisma.expedition.findUnique({
      where: { id: expedition.id },
      select: { status: true, updatedAt: true, returnAt: true, path: true }
    });

    console.log(`‚úÖ Exp√©dition partie`);
    console.log(`   Status: ${departedExpedition?.status}`);
    console.log(`   UpdatedAt: ${departedExpedition?.updatedAt?.toISOString()}`);
    console.log(`   ReturnAt: ${departedExpedition?.returnAt?.toISOString()}`);
    console.log(`   Path: ${JSON.stringify(departedExpedition?.path)}`);

    if (departedExpedition?.status !== "DEPARTED") {
      throw new Error(`‚ùå ERREUR: Status attendu DEPARTED, re√ßu ${departedExpedition?.status}`);
    }

    // ====================================================================
    // √âTAPE 4 : RETURN (apr√®s la dur√©e)
    // ====================================================================
    printStep("√âTAPE 4 : RETURN de l'exp√©dition (apr√®s dur√©e)");

    // Forcer returnAt dans le pass√© pour simuler
    await prisma.expedition.update({
      where: { id: expedition.id },
      data: { returnAt: new Date(Date.now() - 1000) } // Il y a 1 seconde
    });

    await container.expeditionService.returnExpedition(expedition.id);

    const returnedExpedition = await prisma.expedition.findUnique({
      where: { id: expedition.id },
      select: { status: true, returnAt: true, updatedAt: true }
    });

    console.log(`‚úÖ Exp√©dition retourn√©e`);
    console.log(`   Status: ${returnedExpedition?.status}`);
    console.log(`   ReturnAt: ${returnedExpedition?.returnAt?.toISOString()}`);
    console.log(`   UpdatedAt: ${returnedExpedition?.updatedAt?.toISOString()}`);

    if (returnedExpedition?.status !== "RETURNED") {
      throw new Error(`‚ùå ERREUR: Status attendu RETURNED, re√ßu ${returnedExpedition?.status}`);
    }

    // ====================================================================
    // R√âSUM√â FINAL
    // ====================================================================
    printSeparator();
    console.log("‚úÖ ‚úÖ ‚úÖ  TOUS LES TESTS SONT PASS√âS  ‚úÖ ‚úÖ ‚úÖ");
    printSeparator();
    console.log("\nüìä Cycle complet test√© avec succ√®s:");
    console.log("   1. ‚úÖ PLANNING ‚Üí Cr√©ation + ajout membres");
    console.log("   2. ‚úÖ LOCKED ‚Üí Verrouillage √† minuit");
    console.log("   3. ‚úÖ DEPARTED ‚Üí D√©part √† 08h");
    console.log("   4. ‚úÖ RETURNED ‚Üí Retour apr√®s dur√©e");
    console.log("\nüéâ Le syst√®me d'exp√©ditions fonctionne correctement !\n");

    // Nettoyer l'exp√©dition de test
    console.log("üßπ Nettoyage de l'exp√©dition de test...");
    await prisma.expeditionMember.deleteMany({ where: { expeditionId: expedition.id } });
    await prisma.expedition.delete({ where: { id: expedition.id } });
    console.log("‚úÖ Exp√©dition de test supprim√©e\n");

    process.exit(0);
  } catch (error) {
    console.error("\n‚ùå ‚ùå ‚ùå  √âCHEC DU TEST  ‚ùå ‚ùå ‚ùå");
    console.error(error);
    process.exit(1);
  }
}

main();
