// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime

  @@map("sessions")
}

model User {
  id           String     @id @default(cuid())
  discordId    String     @unique
  username     String     // Nom d'utilisateur Discord
  discriminator String    // Tag Discord (ex: "1234")
  globalName   String?    // Nom global Discord (peut être null)
  avatar       String?    // Hash de l'avatar
  characters   Character[]
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("users")
}

model Server {
  id             String     @id @default(cuid())
  discordGuildId String     @unique @map("discord_guild_id")
  name           String     // Nom du serveur
  memberCount    Int        @default(0) // Nombre de membres dans le serveur
  characters     Character[]
  roles          Role[]     // Ajout de la relation avec les rôles
  chantiers      Chantier[] // Relation avec les chantiers
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  @@map("servers")
}

model Role {
  id          String          @id @default(cuid())
  discordId   String          // ID du rôle dans Discord
  name        String          // Nom du rôle
  color       String?         // Couleur du rôle (optionnel)
  server      Server          @relation(fields: [serverId], references: [id])
  serverId    String          @map("server_id")
  characters  CharacterRole[]
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  @@unique([discordId, serverId], name: "role_server_unique")
  @@map("roles")
}

model Character {
  id              String           @id @default(cuid())
  name            String?          // Nom du personnage sur le serveur (peut être null si pas de surnom)
  user            User             @relation(fields: [userId], references: [id])
  userId          String           @map("user_id")
  server          Server           @relation(fields: [serverId], references: [id])
  serverId        String           @map("server_id")
  characterRoles  CharacterRole[]  // Relation avec les rôles
  paTotal         Int              @default(2) // 0-4
  lastPaUpdate    DateTime         @default(now()) @map("last_pa_update")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@unique([userId, serverId])
  @@index([userId])
  @@map("characters")
}

model CharacterRole {
  id          String    @id @default(cuid())
  character   Character @relation(fields: [characterId], references: [id])
  characterId String    @map("character_id")
  role        Role      @relation(fields: [roleId], references: [id])
  roleId      String    @map("role_id")
  assignedAt  DateTime  @default(now()) @map("assigned_at")
  username    String    @map("username")
  roleName    String    @map("role_name")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@unique([characterId, roleId], name: "character_role_unique")
  @@map("character_roles")
}

enum ChantierStatus {
  PLAN
  IN_PROGRESS
  COMPLETED
}

model Chantier {
  id          String   @id @default(cuid())
  name        String   // Nom du chantier
  startDate   DateTime? @map("start_date") // Date du premier investissement de PA (null si pas commencé)
  cost        Int      // Coût total en PA
  spendOnIt   Int      @default(0) // Nombre de PA investis
  status      ChantierStatus @default(PLAN) // plan, in_progress, completed
  server      Server   @relation(fields: [serverId], references: [id])
  serverId    String   @map("server_id")
  createdBy   String   @map("created_by") // ID Discord de l'utilisateur qui a créé le chantier
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("chantiers")
}
