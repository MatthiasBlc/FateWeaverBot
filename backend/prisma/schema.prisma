// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime

  @@map("sessions")
}

model User {
  id           String     @id @default(cuid())
  discordId    String     @unique
  username     String     // Nom d'utilisateur Discord
  discriminator String    // Tag Discord (ex: "1234")
  globalName   String?    // Nom global Discord (peut être null)
  avatar       String?    // Hash de l'avatar
  email        String?    @unique
  characters   Character[]
  notes        Note[]
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("users")
}

model Server {
  id             String     @id @default(cuid())
  discordGuildId String     @unique @map("discord_guild_id")
  name           String?    // Nom du serveur
  memberCount    Int        @default(0) // Nombre de membres dans le serveur
  characters     Character[]
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  @@map("servers")
}

model Character {
  id            String    @id @default(cuid())
  name          String?   // Nom du personnage sur le serveur (peut être null si pas de surnom)
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @map("user_id")
  server        Server    @relation(fields: [serverId], references: [id])
  serverId      String    @map("server_id")
  role          String?   // Rôle le plus élevé du personnage sur le serveur
  notes         Note[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@unique([userId, serverId])
  @@index([userId])
  @@index([serverId])
  @@map("characters")
}

model Note {
  id           String    @id @default(cuid())
  title        String
  content      String    @map("text")
  author       User?     @relation(fields: [authorId], references: [id])
  authorId     String?   @map("author_id")
  character    Character? @relation(fields: [characterId], references: [id])
  characterId  String?   @map("character_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("notes")
}
