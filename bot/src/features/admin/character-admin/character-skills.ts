import {
  ButtonInteraction,
  StringSelectMenuInteraction,
} from "discord.js";
import { logger } from "../../../services/logger";
import { httpClient } from "../../../services/httpClient";
import { createSuccessEmbed } from "../../../utils/embeds";
import type { Character } from "../character-admin.types";
import {
  createSkillSelectMenu,
  createSkillActionButtons,
  type Skill,
} from "../character-admin.components";
import { STATUS } from "../../../constants/emojis";

/**
 * Gestionnaire pour le bouton "G√©rer Comp√©tences".
 * Affiche directement les comp√©tences actuelles du personnage avec les boutons d'action.
 */
export async function handleSkillsButton(
  interaction: ButtonInteraction,
  character: Character
) {
  try {
    await interaction.deferReply({ flags: ["Ephemeral"] });

    // R√©cup√©rer les comp√©tences actuelles du personnage
    const response = await httpClient.get(`/characters/${character.id}/skills`);
    const currentSkills = response.data || [];

    // Cr√©er la liste des comp√©tences format√©e
    let content = `## üìö Comp√©tences de ${character.name}\n`;

    if (currentSkills.length === 0) {
      content += "*Aucune comp√©tence pour le moment.*\n\n";
    } else {
      content += currentSkills
        .map((skill: Skill) => `‚Ä¢ **${skill.name}**${skill.description ? `\n  ${skill.description}` : ''}`)
        .join('\n') + '\n\n';
    }

    // Cr√©er les boutons d'action
    const actionButtons = createSkillActionButtons(character.id);

    await interaction.editReply({
      content,
      components: [actionButtons],
    });
  } catch (error) {
    logger.error("Erreur lors de l'affichage des comp√©tences:", { error });
    if (
      error &&
      typeof error === "object" &&
      "code" in error &&
      error.code === 10062
    ) {
      return; // Interaction expir√©e
    }
    await interaction.reply({
      content: "‚ùå Erreur lors de l'affichage des comp√©tences.",
      flags: ["Ephemeral"],
    });
  }
}

/**
 * Gestionnaire pour l'ajout de comp√©tences.
 * Affiche uniquement les comp√©tences que le personnage ne poss√®de pas encore.
 */
export async function handleAddSkills(
  interaction: ButtonInteraction,
  character: Character
) {
  try {
    await interaction.deferReply({ flags: ["Ephemeral"] });

    // R√©cup√©rer toutes les comp√©tences et celles du personnage
    const [allSkillsResponse, currentSkillsResponse] = await Promise.all([
      httpClient.get('/skills'),
      httpClient.get(`/characters/${character.id}/skills`)
    ]);

    const allSkills = allSkillsResponse.data || [];
    const currentSkills = currentSkillsResponse.data || [];
    const currentSkillIds = new Set(currentSkills.map((s: Skill) => s.id));

    // Filtrer pour ne garder que les comp√©tences non poss√©d√©es
    const availableSkills = allSkills.filter(
      (skill: any) => !currentSkillIds.has(skill.id)
    );

    if (availableSkills.length === 0) {
      await interaction.editReply({
        content: `‚ÑπÔ∏è **${character.name}** poss√®de d√©j√† toutes les comp√©tences disponibles.`,
      });
      return;
    }

    const selectMenu = createSkillSelectMenu(
      availableSkills,
      [],
      'S√©lectionnez les comp√©tences √† ajouter',
      character.id
    );

    await interaction.editReply({
      content: `## ‚ûï Ajouter des comp√©tences √† ${character.name}\nChoisissez dans la liste les comp√©tences √† ajouter :`,
      components: [selectMenu],
    });
  } catch (error) {
    logger.error("Erreur lors de la pr√©paration de l'ajout de comp√©tences:", { error });
    if (!interaction.replied) {
      await interaction.reply({
        content: "‚ùå Erreur lors de la pr√©paration de l'ajout de comp√©tences.",
        flags: ["Ephemeral"],
      });
    } else {
      await interaction.editReply({
        content: "‚ùå Erreur lors de la pr√©paration de l'ajout de comp√©tences.",
      });
    }
  }
}

/**
 * Gestionnaire pour la suppression de comp√©tences.
 * Affiche uniquement les comp√©tences que le personnage poss√®de d√©j√†.
 */
export async function handleRemoveSkills(
  interaction: ButtonInteraction,
  character: Character
) {
  try {
    await interaction.deferReply({ flags: ["Ephemeral"] });

    // R√©cup√©rer les comp√©tences actuelles du personnage
    const response = await httpClient.get(`/characters/${character.id}/skills`);
    const currentSkills = response.data || [];

    if (currentSkills.length === 0) {
      await interaction.editReply({
        content: `‚ÑπÔ∏è **${character.name}** n'a aucune comp√©tence √† retirer.`,
      });
      return;
    }

    // Cr√©er un menu de s√©lection avec uniquement les comp√©tences actuelles
    const selectMenu = createSkillSelectMenu(
      currentSkills,
      [],
      'S√©lectionnez les comp√©tences √† retirer',
      character.id
    );

    await interaction.editReply({
      content: `## ‚ûñ Retirer des comp√©tences de ${character.name}\nS√©lectionnez les comp√©tences √† retirer :`,
      components: [selectMenu],
    });
  } catch (error) {
    logger.error("Erreur lors de la pr√©paration de la suppression de comp√©tences:", { error });
    if (!interaction.replied) {
      await interaction.reply({
        content: "‚ùå Erreur lors de la pr√©paration de la suppression de comp√©tences.",
        flags: ["Ephemeral"],
      });
    } else {
      await interaction.editReply({
        content: "‚ùå Erreur lors de la pr√©paration de la suppression de comp√©tences.",
      });
    }
  }
}

/**
 * Gestionnaire pour la s√©lection de comp√©tences dans le menu.
 */
export async function handleSkillSelect(
  interaction: StringSelectMenuInteraction,
  character: Character | null,
  action: 'add' | 'remove'
) {
  try {
    const selectedSkillIds = interaction.values;

    if (selectedSkillIds.length === 0) {
      await interaction.reply({
        content: "‚ùå Aucune comp√©tence s√©lectionn√©e.",
        flags: ["Ephemeral"],
      });
      return;
    }

    if (!character) {
      await interaction.reply({
        content: "‚ùå Personnage non trouv√©.",
        flags: ["Ephemeral"],
      });
      return;
    }

    await interaction.deferReply({ flags: ["Ephemeral"] });

    const results = [];

    for (const skillId of selectedSkillIds) {
      try {
        // V√©rifier que la comp√©tence existe avant de l'ajouter
        if (action === 'add') {
          const skillsResponse = await httpClient.get('/skills');
          const allSkills = skillsResponse.data || [];
          const skillExists = allSkills.some((skill: any) => skill.id === skillId);

          if (!skillExists) {
            results.push(`‚ùå Comp√©tence non trouv√©e: ${skillId}`);
            continue;
          }
        }

        if (action === 'add') {
          await httpClient.post(`/characters/${character.id}/skills/${skillId}`);
          results.push(`${STATUS.SUCCESS} Comp√©tence ajout√©e`);
        } else {
          await httpClient.delete(`/characters/${character.id}/skills/${skillId}`);
          results.push(`${STATUS.SUCCESS} Comp√©tence retir√©e`);
        }
      } catch (error: any) {
        const errorMessage = error?.response?.data?.message || error.message || 'Erreur inconnue';
        results.push(`${STATUS.ERROR} Erreur: ${errorMessage}`);
      }
    }

    const embed = action === 'add'
      ? createSuccessEmbed('Ajout de comp√©tences', results.join('\n')).setFooter({
        text: `${selectedSkillIds.length} comp√©tence${selectedSkillIds.length > 1 ? 's' : ''} ajout√©e${selectedSkillIds.length > 1 ? 's' : ''}`,
      })
      : createSuccessEmbed('Suppression de comp√©tences', results.join('\n')).setFooter({
        text: `${selectedSkillIds.length} comp√©tence${selectedSkillIds.length > 1 ? 's' : ''} retir√©e${selectedSkillIds.length > 1 ? 's' : ''}`,
      });

    await interaction.editReply({ embeds: [embed] });
  } catch (error) {
    logger.error(`Erreur lors de ${action === 'add' ? 'l\'ajout' : 'la suppression'} de comp√©tences:`, { error });
    await interaction.reply({
      content: `‚ùå Erreur lors de ${action === 'add' ? 'l\'ajout' : 'la suppression'} des comp√©tences.`,
      flags: ["Ephemeral"],
    });
  }
}
