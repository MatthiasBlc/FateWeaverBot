import {
  ButtonInteraction,
  StringSelectMenuInteraction,
  ActionRowBuilder,
  StringSelectMenuBuilder,
} from "discord.js";
import { logger } from "../../../services/logger";
import { apiService } from "../../../services/api";
import { createInfoEmbed, createSuccessEmbed, createErrorEmbed } from "../../../utils/embeds";
import type { Character } from "../character-admin.types";
import {
  createCapabilitySelectMenu,
  createCapabilityActionButtons,
  type Capability,
} from "../character-admin.components";
import { getCharacterCapabilities } from "../../../services/capability.service";
import { httpClient } from "../../../services/httpClient";

/**
 * Gestionnaire pour le bouton "G√©rer Capacit√©s".
 * Affiche directement les capacit√©s actuelles du personnage avec les boutons d'action.
 */
export async function handleCapabilitiesButton(
  interaction: ButtonInteraction,
  character: Character
) {
  try {
    await interaction.deferReply({ flags: ["Ephemeral"] });

    // R√©cup√©rer les capacit√©s actuelles du personnage
    const currentCapabilities = await getCharacterCapabilities(character.id);

    // Cr√©er la liste des capacit√©s format√©e
    let content = `## üîÆ Capacit√©s de ${character.name}\n`;

    if (currentCapabilities.length === 0) {
      content += "*Aucune capacit√© pour le moment.*\n\n";
    } else {
      content += currentCapabilities
        .map(cap => `‚Ä¢ **${cap.name}** (${cap.costPA} PA)${cap.description ? `\n  ${cap.description}` : ''}`)
        .join('\n') + '\n\n';
    }

    // Cr√©er les boutons d'action
    const actionButtons = createCapabilityActionButtons(character.id);

    await interaction.editReply({
      content,
      components: [actionButtons],
    });
  } catch (error) {
    logger.error("Erreur lors de l'affichage des capacit√©s:", { error });
    if (
      error &&
      typeof error === "object" &&
      "code" in error &&
      error.code === 10062
    ) {
      return; // Interaction expir√©e
    }
    await interaction.reply({
      content: "‚ùå Erreur lors de l'affichage des capacit√©s.",
      flags: ["Ephemeral"],
    });
  }
}

/**
 * Gestionnaire pour l'ajout de capacit√©s.
 * Affiche uniquement les capacit√©s que le personnage ne poss√®de pas encore.
 */
export async function handleAddCapabilities(
  interaction: ButtonInteraction,
  character: Character
) {
  try {
    await interaction.deferReply({ flags: ["Ephemeral"] });

    // R√©cup√©rer toutes les capacit√©s et celles du personnage
    const [allCapabilitiesResponse, currentCapabilities] = await Promise.all([
      httpClient.get('/capabilities'),
      getCharacterCapabilities(character.id)
    ]);

    const allCapabilities = allCapabilitiesResponse.data || [];
    const currentCapabilityIds = new Set(currentCapabilities.map(c => c.id));

    // Filtrer pour ne garder que les capacit√©s non poss√©d√©es
    const availableCapabilities = allCapabilities.filter(
      (cap: any) => !currentCapabilityIds.has(cap.id)
    );

    if (availableCapabilities.length === 0) {
      await interaction.editReply({
        content: `‚ÑπÔ∏è **${character.name}** poss√®de d√©j√† toutes les capacit√©s disponibles.`,
      });
      return;
    }

    const selectMenu = createCapabilitySelectMenu(
      availableCapabilities,
      [],
      'S√©lectionnez les capacit√©s √† ajouter',
      character.id
    );

    await interaction.editReply({
      content: `## ‚ûï Ajouter des capacit√©s √† ${character.name}\nChoisissez dans la liste les capacit√©s √† ajouter :`,
      components: [selectMenu],
    });
  } catch (error) {
    logger.error("Erreur lors de la pr√©paration de l'ajout de capacit√©s:", { error });
    if (!interaction.replied) {
      await interaction.reply({
        content: "‚ùå Erreur lors de la pr√©paration de l'ajout de capacit√©s.",
        flags: ["Ephemeral"],
      });
    } else {
      await interaction.editReply({
        content: "‚ùå Erreur lors de la pr√©paration de l'ajout de capacit√©s.",
      });
    }
  }
}

/**
 * Gestionnaire pour la suppression de capacit√©s.
 * Affiche uniquement les capacit√©s que le personnage poss√®de d√©j√†.
 */
export async function handleRemoveCapabilities(
  interaction: ButtonInteraction,
  character: Character
) {
  try {
    await interaction.deferReply({ flags: ["Ephemeral"] });

    // R√©cup√©rer les capacit√©s actuelles du personnage
    const currentCapabilities = await getCharacterCapabilities(character.id);

    if (currentCapabilities.length === 0) {
      await interaction.editReply({
        content: `‚ÑπÔ∏è **${character.name}** n'a aucune capacit√© √† retirer.`,
      });
      return;
    }

    // Cr√©er un menu de s√©lection avec uniquement les capacit√©s actuelles
    const selectMenu = createCapabilitySelectMenu(
      currentCapabilities,
      [],
      'S√©lectionnez les capacit√©s √† retirer',
      character.id
    );

    await interaction.editReply({
      content: `## ‚ûñ Retirer des capacit√©s de ${character.name}\nS√©lectionnez les capacit√©s √† retirer :`,
      components: [selectMenu],
    });
  } catch (error) {
    logger.error("Erreur lors de la pr√©paration de la suppression de capacit√©s:", { error });
    if (!interaction.replied) {
      await interaction.reply({
        content: "‚ùå Erreur lors de la pr√©paration de la suppression de capacit√©s.",
        flags: ["Ephemeral"],
      });
    } else {
      await interaction.editReply({
        content: "‚ùå Erreur lors de la pr√©paration de la suppression de capacit√©s.",
      });
    }
  }
}

/**
 * Gestionnaire pour afficher les capacit√©s actuelles.
 */
export async function handleViewCapabilities(
  interaction: ButtonInteraction,
  character: Character
) {
  try {
    const capabilities = await getCharacterCapabilities(character.id);

    if (capabilities.length === 0) {
      await interaction.reply({
        content: `üîÆ **${character.name}** ne conna√Æt aucune capacit√©.`,
        flags: ["Ephemeral"],
      });
      return;
    }

    const capabilitiesList = capabilities
      .map(cap => `‚Ä¢ **${cap.name}** (${cap.costPA} PA)`)
      .join('\n');

    const embed = createInfoEmbed(
      `üîÆ Capacit√©s de ${character.name}`,
      capabilitiesList
    ).setFooter({
      text: `${capabilities.length} capacit√©${capabilities.length > 1 ? 's' : ''} connue${capabilities.length > 1 ? 's' : ''}`,
    });

    await interaction.reply({ embeds: [embed], flags: ["Ephemeral"] });
  } catch (error) {
    logger.error("Erreur lors de l'affichage des capacit√©s:", { error });
    await interaction.reply({
      content: "‚ùå Erreur lors de l'affichage des capacit√©s.",
      flags: ["Ephemeral"],
    });
  }
}

/**
 * Gestionnaire pour la s√©lection de capacit√©s dans le menu.
 */
export async function handleCapabilitySelect(
  interaction: StringSelectMenuInteraction,
  character: Character | null,
  action: 'add' | 'remove'
) {
  try {
    const selectedCapabilityIds = interaction.values;

    if (selectedCapabilityIds.length === 0) {
      await interaction.reply({
        content: "‚ùå Aucune capacit√© s√©lectionn√©e.",
        flags: ["Ephemeral"],
      });
      return;
    }

    if (!character) {
      await interaction.reply({
        content: "‚ùå Personnage non trouv√©.",
        flags: ["Ephemeral"],
      });
      return;
    }

    await interaction.deferReply({ flags: ["Ephemeral"] });

    const results = [];

    for (const capabilityId of selectedCapabilityIds) {
      try {
        // V√©rifier que la capacit√© existe avant de l'ajouter
        if (action === 'add') {
          const capabilitiesResponse = await httpClient.get('/capabilities');
          const allCapabilities = capabilitiesResponse.data || [];
          const capabilityExists = allCapabilities.some((cap: any) => cap.id === capabilityId);

          if (!capabilityExists) {
            results.push(`‚ùå Capacit√© non trouv√©e: ${capabilityId}`);
            continue;
          }
        }

        if (action === 'add') {
          await httpClient.post(`/characters/${character.id}/capabilities/${capabilityId}`);
          results.push(`‚úÖ Capacit√© ajout√©e`);
        } else {
          await httpClient.delete(`/characters/${character.id}/capabilities/${capabilityId}`);
          results.push(`‚úÖ Capacit√© retir√©e`);
        }
      } catch (error: any) {
        const errorMessage = error?.response?.data?.message || error.message || 'Erreur inconnue';
        results.push(`‚ùå Erreur: ${errorMessage}`);
      }
    }

    const embed = action === 'add'
      ? createSuccessEmbed('Ajout de capacit√©s', results.join('\n')).setFooter({
          text: `${selectedCapabilityIds.length} capacit√©${selectedCapabilityIds.length > 1 ? 's' : ''} ajout√©e${selectedCapabilityIds.length > 1 ? 's' : ''}`,
        })
      : createErrorEmbed('Suppression de capacit√©s', results.join('\n')).setFooter({
          text: `${selectedCapabilityIds.length} capacit√©${selectedCapabilityIds.length > 1 ? 's' : ''} retir√©e${selectedCapabilityIds.length > 1 ? 's' : ''}`,
        });

    await interaction.editReply({ embeds: [embed] });
  } catch (error) {
    logger.error(`Erreur lors de ${action === 'add' ? 'l\'ajout' : 'la suppression'} de capacit√©s:`, { error });
    await interaction.reply({
      content: `‚ùå Erreur lors de ${action === 'add' ? 'l\'ajout' : 'la suppression'} des capacit√©s.`,
      flags: ["Ephemeral"],
    });
  }
}
