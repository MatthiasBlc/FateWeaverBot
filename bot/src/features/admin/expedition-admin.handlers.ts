import {
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  StringSelectMenuBuilder,
  type ChatInputCommandInteraction,
} from "discord.js";
import { Expedition } from "../../types/expedition";
import { apiService } from "../../services/api";
import { logger } from "../../services/logger";

export async function handleExpeditionAdminCommand(interaction: ChatInputCommandInteraction) {
  try {
    // Get all expeditions (including returned ones for admin)
    const expeditions = await apiService.getAllExpeditions(true);

    if (!expeditions || expeditions.length === 0) {
      await interaction.reply({
        content: "‚ùå Aucune exp√©dition trouv√©e.",
        flags: ["Ephemeral"],
      });
      return;
    }

    // Create dropdown menu with expeditions
    const selectMenu = new StringSelectMenuBuilder()
      .setCustomId("expedition_admin_select")
      .setPlaceholder("S√©lectionnez une exp√©dition √† g√©rer")
      .addOptions(
        expeditions.map((exp: Expedition) => ({
          label: `${exp.name} (${exp.status})`,
          description: `Membres: ${exp.members?.length || 0}, Stock: ${exp.foodStock}`,
          value: exp.id,
        }))
      );

    const row = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(selectMenu);

    const embed = new EmbedBuilder()
      .setColor(0xff9900)
      .setTitle("üõ†Ô∏è Administration des Exp√©ditions")
      .setDescription(`**${expeditions.length}** exp√©ditions trouv√©es`)
      .setTimestamp();

    await interaction.reply({
      embeds: [embed],
      components: [row],
      flags: ["Ephemeral"],
    });

  } catch (error) {
    logger.error("Error in expedition admin command:", { error });
    await interaction.reply({
      content: "‚ùå Une erreur est survenue lors de la r√©cup√©ration des exp√©ditions.",
      flags: ["Ephemeral"],
    });
  }
}

export async function handleExpeditionAdminSelect(interaction: any) {
  try {
    const expeditionId = interaction.values[0];

    // Get expedition details
    const expedition = await apiService.getExpeditionById(expeditionId);
    if (!expedition) {
      await interaction.reply({
        content: "‚ùå Exp√©dition non trouv√©e.",
        flags: ["Ephemeral"],
      });
      return;
    }

    // Create admin buttons
    const buttonRow = new ActionRowBuilder<ButtonBuilder>()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`expedition_admin_modify_${expeditionId}`)
          .setLabel("Modifier dur√©e/stock")
          .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
          .setCustomId(`expedition_admin_members_${expeditionId}`)
          .setLabel("G√©rer membres")
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId(`expedition_admin_return_${expeditionId}`)
          .setLabel("Retour forc√©")
          .setStyle(ButtonStyle.Danger)
      );

    // Create embed with expedition details
    const embed = new EmbedBuilder()
      .setColor(0xff9900)
      .setTitle(`üõ†Ô∏è ${expedition.name}`)
      .addFields(
        { name: "üì¶ Stock de nourriture", value: `${expedition.foodStock}`, inline: true },
        { name: "‚è±Ô∏è Dur√©e", value: `${expedition.duration}h`, inline: true },
        { name: "üìç Statut", value: getStatusEmoji(expedition.status), inline: true },
        { name: "üë• Membres", value: `${expedition.members?.length || 0}`, inline: true },
        { name: "üèõÔ∏è Ville", value: expedition.town?.name || "Inconnue", inline: true },
        { name: "üë§ Cr√©√©e par", value: `<@${expedition.createdBy}>`, inline: true }
      )
      .setTimestamp();

    await interaction.update({
      embeds: [embed],
      components: [buttonRow],
    });

  } catch (error) {
    logger.error("Error in expedition admin select:", { error });
    await interaction.reply({
      content: "‚ùå Une erreur est survenue lors de la r√©cup√©ration des d√©tails de l'exp√©dition.",
      flags: ["Ephemeral"],
    });
  }
}

export async function handleExpeditionAdminModify(interaction: any, expeditionId: string) {
  try {
    // This would typically show a modal for modifying duration/food stock
    // For now, just show a placeholder
    await interaction.reply({
      content: "‚ö†Ô∏è Modification d'exp√©dition - fonctionnalit√© √† impl√©menter",
      flags: ["Ephemeral"],
    });
  } catch (error) {
    logger.error("Error in expedition admin modify:", { error });
  }
}

export async function handleExpeditionAdminMembers(interaction: any, expeditionId: string) {
  try {
    // This would show member management interface
    await interaction.reply({
      content: "‚ö†Ô∏è Gestion des membres - fonctionnalit√© √† impl√©menter",
      flags: ["Ephemeral"],
    });
  } catch (error) {
    logger.error("Error in expedition admin members:", { error });
  }
}

export async function handleExpeditionAdminReturn(interaction: any, expeditionId: string) {
  try {
    // Force return the expedition
    const expedition = await apiService.returnExpedition(expeditionId);

    await interaction.update({
      content: `‚úÖ Exp√©dition **${expedition.name}** retourn√©e de force avec succ√®s!`,
      embeds: [],
      components: [],
    });

    logger.info("Expedition force returned via admin command", {
      expeditionId,
      expeditionName: expedition.name,
      adminUserId: interaction.user.id,
    });

  } catch (error) {
    logger.error("Error in expedition admin return:", { error });
    await interaction.reply({
      content: `‚ùå Erreur lors du retour forc√© de l'exp√©dition: ${error instanceof Error ? error.message : 'Erreur inconnue'}`,
      flags: ["Ephemeral"],
    });
  }
}

function getStatusEmoji(status: string): string {
  switch (status) {
    case "PLANNING": return "üîÑ PLANIFICATION";
    case "LOCKED": return "üîí VERROUILL√âE";
    case "DEPARTED": return "‚úàÔ∏è PARTIE";
    case "RETURNED": return "üè† REVENUE";
    default: return status;
  }
}
