import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, type GuildMember } from "discord.js";
import { apiService } from "../../services/api";
import { logger } from "../../services/logger";

export async function handleViewFoodStockCommand(interaction: any) {
  const member = interaction.member as GuildMember;
  const user = interaction.user;

  try {
    // R√©cup√©rer la ville du serveur
    const town = await apiService.getTownByGuildId(interaction.guildId!);

    if (!town) {
      await interaction.reply({
        content: "‚ùå Aucune ville trouv√©e pour ce serveur.",
        flags: ["Ephemeral"],
      });
      return;
    }

    // R√©cup√©rer le personnage de l'utilisateur
    let character = null;
    let showEatButton = false;
    let characterHungerStatus = "";

    try {
      character = await apiService.getOrCreateCharacter(
        user.id,
        interaction.guildId!,
        interaction.guild?.name || "Serveur inconnu",
        {
          username: user.username,
          nickname: member.nickname || null,
          roles: member.roles.cache
            .filter((role) => role.id !== interaction.guildId)
            .map((role) => role.id),
        },
        interaction.client
      );

      // D√©terminer si le bouton doit √™tre affich√© et le statut de faim
      if (character.hungerLevel >= 4) {
        // Personnage mort
        showEatButton = false;
        characterHungerStatus = "üíÄ Mort - ne peut plus manger";
      } else if (character.hungerLevel === 0) {
        // Personnage en pleine forme
        showEatButton = false;
        characterHungerStatus = "üòä En pleine forme";
      } else {
        // Personnage a faim (niveau 1, 2 ou 3)
        showEatButton = true;
        const hungerText = getHungerLevelText(character.hungerLevel);
        const hungerEmoji = getHungerEmoji(character.hungerLevel);
        characterHungerStatus = `${hungerEmoji} ${hungerText}`;
      }
    } catch (error) {
      // Si on ne peut pas r√©cup√©rer le personnage, afficher le bouton par d√©faut
      showEatButton = true;
      characterHungerStatus = "‚ùì Statut inconnu";
    }

    // Cr√©er l'embed d'information
    const embed = new EmbedBuilder()
      .setColor(getFoodStockColor(town.foodStock))
      .setTitle(`üè™ Stock de Vivres`)
      .setDescription(
        `La ville **${town.name}** dispose actuellement de **${town.foodStock}** vivres.`
      )
      .addFields(
        {
          name: "üìä Stock Actuel",
          value: `${town.foodStock}`,
          inline: true,
        },
        {
          name: "üèòÔ∏è Ville",
          value: town.name,
          inline: true,
        },
        {
          name: "üí° Conseil",
          value: getFoodStockAdvice(town.foodStock),
          inline: true,
        }
      )
      .setFooter({
        text: "Utilisez /manger pour nourrir votre personnage",
        iconURL: interaction.client.user?.displayAvatarURL(),
      })
      .setTimestamp();

    // Ajouter le champ du statut de faim du personnage
    if (character) {
      embed.addFields({
        name: "üçΩÔ∏è Votre √âtat",
        value: characterHungerStatus,
        inline: false,
      });
    }

    // Pr√©parer les composants (boutons) si n√©cessaire
    let components: any[] = [];
    if (showEatButton && town.foodStock > 0) {
      const eatButton = new ButtonBuilder()
        .setCustomId('eat_food')
        .setLabel('üçΩÔ∏è Manger')
        .setStyle(ButtonStyle.Primary);

      const row = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(eatButton);

      components = [row];
    }

    await interaction.reply({ embeds: [embed], components, flags: ["Ephemeral"] });
  } catch (error: any) {
    logger.error("Erreur lors de la r√©cup√©ration du stock de foodstock:", {
      guildId: interaction.guildId,
      error: error.message,
      status: error.response?.status,
      data: error.response?.data,
    });

    let errorMessage =
      "‚ùå Une erreur est survenue lors de la r√©cup√©ration du stock de foodstock.";

    if (error.response?.status === 404) {
      errorMessage =
        "‚ùå Aucune ville trouv√©e pour ce serveur. Contactez un administrateur.";
    } else if (
      error.response?.status === 401 ||
      error.response?.status === 403
    ) {
      errorMessage = "‚ùå Probl√®me d'autorisation. Contactez un administrateur.";
    }

    await interaction.reply({
      content: errorMessage,
      flags: ["Ephemeral"],
    });
  }
}

function getFoodStockColor(stock: number): number {
  if (stock > 100) return 0x00ff00; // Vert - stock √©lev√©
  if (stock > 50) return 0xffff00; // Jaune - stock moyen
  if (stock > 20) return 0xffa500; // Orange - stock faible
  return 0xff0000; // Rouge - stock critique
}

function getFoodStockAdvice(stock: number): string {
  if (stock <= 0) return "üö® Aucun vivre ! La ville va mourir de faim !";
  if (stock <= 20) return "‚ö†Ô∏è Vivres tr√®s faibles, mangez avec parcimonie !";
  if (stock <= 50) return "‚ö° Vivres mod√©r√©es, surveillez la consommation";
  if (stock <= 100)
    return "‚úÖ Vivres correctes, vous pouvez manger normalement";
  return "üåü Vivres √©lev√©es, profitez-en pour faire des r√©serves !";
}

function getHungerLevelText(level: number): string {
  switch (level) {
    case 0:
      return "En bonne sant√©";
    case 1:
      return "Faim";
    case 2:
      return "Affam√©";
    case 3:
      return "Agonie";
    case 4:
      return "Mort";
    default:
      return "Inconnu";
  }
}

function getHungerEmoji(level: number): string {
  switch (level) {
    case 0:
      return "üòä";
    case 1:
      return "ü§§";
    case 2:
      return "üòï";
    case 3:
      return "üò∞";
    case 4:
      return "üíÄ";
    default:
      return "‚ùì";
  }
}
